service: redistribution
plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

frameworkVersion: '3'

useDotenv: true
custom:
  dbName: process.env.DB_NAME
  dbUser: process.env.DB_USER
  dbHost: process.env.DB_HOST
  dbPassword: process.env.DB_PASSWORD
  webpack:
    webpackConfig: 'webpack.config.ts'
    includeModules: true
    packager: 'npm'

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - logs:CreateLogGroup,
            - logs:CreateLogStream,
            - logs:PutLogEvents,
            - ec2:CreateNetworkInterface,
            - ec2:DescribeNetworkInterfaces,
            - ec2:DeleteNetworkInterface,
            - ec2:AssignPrivateIpAddresses,
            - ec2:UnassignPrivateIpAddresses
          Resource:
            - "*"

        - Effect: "Allow"
          Action:
            - sqs:ListQueues,
            - sqs:ReceiveMessage,
            - sqs:DeleteMessage,
            - sqs:GetQueueAttributes
          Resource:
            - "*"

        - Effect: "Allow"
          Action:
            - sqs:*
          Resource:
            - arn:aws:sqs:us-east-1:884881268505:Redistribution

        - Effect: "Allow"
          Action:
            - lambda:InvokeFunction
            - lambda:InvokeAsync
          Resource:
            - "*"

functions:       
  store:
    handler: src/functions/store/handler.main
    events:
      - http:
          path: /store
          method: post

  mediator:
    handler: src/functions/mediator/handler.main
    events:
      - http:
          path: /mediator
          method: post
    vpc:
      securityGroupIds:
        - sg-0f036e6bb4e0cb393
      subnetIds:
        - subnet-0a79c9b6b6d522a3d
        - subnet-0b9056ab68ffd2d31
        - subnet-07dcd7e35633f1d39
        - subnet-0d6767115e3ac99e7
        - subnet-0deda19a8351327c7
        - subnet-038b1a906589203c8


  verified:
    handler: src/functions/verified/handler.main
    events:
      - http:
          path: /verified
          method: post
    vpc:
      securityGroupIds:
        - sg-0f036e6bb4e0cb393
      subnetIds:
        - subnet-0a79c9b6b6d522a3d
        - subnet-0b9056ab68ffd2d31
        - subnet-07dcd7e35633f1d39
        - subnet-0d6767115e3ac99e7
        - subnet-0deda19a8351327c7
        - subnet-038b1a906589203c8


# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
